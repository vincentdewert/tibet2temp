<module>
	<adapter name="DeleteFromExceptionLog">
		<receiver name="DeleteFromExceptionLog">
			<listener className="nl.nn.adapterframework.receivers.JavaListener" serviceName="ijatibet2_DeleteFromExceptionLog" />
		</receiver>
		<pipeline firstPipe="SelectRecord" transactionAttribute="Required">
			<exits>
				<exit state="success" name="EXIT" />
			</exits>

			<!-- INPUT (sessionKeys): principal -->

			<SenderPipe name="SelectRecord" storeResultInSessionKey="RESULT">
				<FixedQuerySender query="SELECT BUSINESSDOMAIN, SERVICENAME, SERVICECONTEXT, APPLICATIONNAME FROM EXCEPTIONLOG WHERE LOGID=?" queryType="select" lockRows="true" blobSmartGet="true">
					<param name="LOGID" sessionKey="originalMessage" />
				</FixedQuerySender>
				<forward name="success" path="DeleteFromExceptionLog_Check" />
			</SenderPipe>

			<SenderPipe name="DeleteFromExceptionLog_Check" active="${delete.check.active}">
				<sender className="nl.nn.adapterframework.senders.IbisLocalSender" javaListener="DeleteFromExceptionLog_Check">
					<param name="BUSINESSDOMAIN" xpathExpression="result/rowset/row/field[@name = 'BUSINESSDOMAIN']"/>
					<param name="SERVICECONTEXT" xpathExpression="result/rowset/row/field[@name = 'SERVICECONTEXT']"/>
					<param name="APPLICATIONNAME" xpathExpression="result/rowset/row/field[@name = 'APPLICATIONNAME']"/>
					<param name="SERVICENAME" xpathExpression="result/rowset/row/field[@name = 'SERVICENAME']"/>
					<param name="principal" sessionKey="principal"/>
				</sender>
				<forward name="success" path="SwitchCheck" />
			</SenderPipe>

			<pipe name="DeleteFromExceptionLog_Check" className="nl.nn.adapterframework.pipes.EchoPipe" active="!${delete.check.active}">
				<forward name="success" path="SwitchCheck" />
			</pipe>

			<pipe name="SwitchCheck" className="nl.nn.adapterframework.pipes.XmlSwitch">
				<forward name="Request" path="DeleteRecord" />
				<forward name="result" path="DeleteRecord" />
				<forward name="error" path="EXIT" />
			</pipe>

			<SenderPipe name="DeleteRecord">
				<sender className="nl.nn.adapterframework.jdbc.FixedQuerySender" query="DELETE FROM EXCEPTIONLOG WHERE LOGID=?" queryType="delete">
					<param name="LOGID" sessionKey="originalMessage" />
				</sender>
				<forward name="success" path="okay" />
			</SenderPipe>

			<FixedResultPipe name="okay" returnString="&lt;ok/&gt;" writeToSecLog="true" secLogSessionKeys="originalMessage,principal">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>
		</pipeline>
	</adapter>
	<adapter name="DeleteFromExceptionLog_Check">
		<receiver name="DeleteFromExceptionLog_Check">
			<listener className="nl.nn.adapterframework.receivers.JavaListener" name="DeleteFromExceptionLog_Check" />
		</receiver>
		<pipeline firstPipe="switchPrincipal">
			<exits>
				<exit state="success" name="EXIT" />
			</exits>

			<!-- INPUT (sessionKeys): principal, queue -->

			<pipe name="switchPrincipal" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="string-length($principal)=0" getInputFromFixedValue="&lt;dummy/&gt;">
				<param name="principal" sessionKey="principal" />
				<forward name="true" path="emptyPrincipalError" />
				<forward name="false" path="switchBusinessDomain" />
			</pipe>

			<FixedResultPipe name="emptyPrincipalError" returnString="&lt;error&gt;EMPTY_PRINCIPAL&lt;/error&gt;">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>

			<pipe name="switchBusinessDomain" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="string-length($BUSINESSDOMAIN)=0" getInputFromFixedValue="&lt;dummy/&gt;">
				<param name="BUSINESSDOMAIN" sessionKey="BUSINESSDOMAIN" />
				<forward name="true" path="emptyBusinessDomainError" />
				<forward name="false" path="switchOperationName" />
			</pipe>

			<FixedResultPipe name="emptyBusinessDomainError" returnString="&lt;error&gt;EMPTY_BUSINESSDOMAIN&lt;/error&gt;">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>

			<!-- P2P of ESB -->
			<pipe name="switchOperationName" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="string-length($APPLICATIONNAME)=0" getInputFromFixedValue="&lt;dummy/&gt;">
				<param name="APPLICATIONNAME" sessionKey="APPLICATIONNAME" />
				<forward name="true" path="switchApplicationName" />
				<forward name="false" path="switchServiceContext" />
			</pipe>

			<!-- Old or new naming standard -->
			<pipe name="switchServiceContext" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="string-length($SERVICECONTEXT)=0" getInputFromFixedValue="&lt;dummy/&gt;">
				<param name="SERVICECONTEXT" sessionKey="SERVICECONTEXT" />
				<forward name="true" path="getRole_esb_new" />
				<forward name="false" path="getRole_esb_old" />
			</pipe>

			<pipe name="switchApplicationName" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="string-length($APPLICATIONNAME)=0" getInputFromFixedValue="&lt;dummy/&gt;">
				<param name="APPLICATIONNAME" sessionKey="APPLICATIONNAME" />
				<forward name="true" path="emptyServApplNameError" />
				<forward name="false" path="getRole_p2p" />
			</pipe>

			<FixedResultPipe name="emptyServApplNameError" returnString="&lt;error&gt;EMPTY_SERV_APPL_NAME&lt;/error&gt;">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>

			<pipe name="getRole_esb_old" className="nl.nn.adapterframework.jdbc.ResultSetIteratingPipe" query="SELECT ROLE FROM AUTHORISATION WHERE BUSINESSDOMAIN=? AND SERV_APPL_NAME=?" active="${delete.db.active}">
				<sender className="nl.nn.adapterframework.senders.IbisLocalSender" javaListener="DeleteFromExceptionLog_Check_Role">
					<param name="principal" sessionKey="principal" />
				</sender>
				<param name="BUSINESSDOMAIN" sessionKey="BUSINESSDOMAIN" />
				<param name="serviceContext" sessionKey="SERVICECONTEXT" />
				<forward name="success" path="check_if_result" />
			</pipe>

			<pipe name="check_if_result" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="boolean(/results[node()])">
				<forward name="true" path="switchResultFound" />
				<forward name="false" path="check_for_servicename" />
			</pipe>

			<pipe name="check_for_servicename" className="nl.nn.adapterframework.jdbc.ResultSetIteratingPipe" query="SELECT ROLE FROM AUTHORISATION WHERE BUSINESSDOMAIN=? AND SERV_APPL_NAME=?" active="${delete.db.active}">
				<sender className="nl.nn.adapterframework.senders.IbisLocalSender" javaListener="DeleteFromExceptionLog_Check_Role">
					<param name="principal" sessionKey="principal" />
				</sender>
				<param name="BUSINESSDOMAIN" sessionKey="BUSINESSDOMAIN" />
				<param name="SERVICENAME" sessionKey="SERVICENAME" />
				<forward name="success" path="switchResultFound" />
			</pipe>

			<pipe name="getRole_esb_new" className="nl.nn.adapterframework.jdbc.ResultSetIteratingPipe" query="SELECT ROLE FROM AUTHORISATION WHERE BUSINESSDOMAIN=? AND SERV_APPL_NAME=?" active="${delete.db.active}">
				<sender className="nl.nn.adapterframework.senders.IbisLocalSender" javaListener="DeleteFromExceptionLog_Check_Role">
					<param name="principal" sessionKey="principal" />
				</sender>
				<param name="BUSINESSDOMAIN" sessionKey="BUSINESSDOMAIN" />
				<param name="SERV_APPL_NAME" sessionKey="SERVICENAME" />
				<forward name="success" path="switchResultFound" />
			</pipe>

			<FixedResultPipe name="getRole_esb" returnString="&lt;results&gt;&lt;result&gt;[found]&lt;/result&gt;&lt;/results&gt;" active="!${delete.db.active}">
				<forward name="success" path="switchResultFound" />
			</FixedResultPipe>

			<pipe name="getRole_p2p" className="nl.nn.adapterframework.jdbc.ResultSetIteratingPipe" query="SELECT ROLE FROM AUTHORISATION WHERE BUSINESSDOMAIN=? AND SERV_APPL_NAME=?" active="${delete.db.active}">
				<sender className="nl.nn.adapterframework.senders.IbisLocalSender" javaListener="DeleteFromExceptionLog_Check_Role">
					<param name="principal" sessionKey="principal" />
				</sender>
				<param name="BUSINESSDOMAIN" sessionKey="BUSINESSDOMAIN" />
				<param name="SERV_APPL_NAME" sessionKey="APPLICATIONNAME" />
				<forward name="success" path="switchResultFound" />
			</pipe>

			<FixedResultPipe name="getRole_p2p" returnString="&lt;results&gt;&lt;result&gt;[found]&lt;/result&gt;&lt;/results&gt;" active="!${delete.db.active}">
				<forward name="success" path="switchResultFound" />
			</FixedResultPipe>

			<pipe name="switchResultFound" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="count(results/result[normalize-space(.)='[found]'])=0">
				<forward name="true" path="switchResultNotFound" />
				<forward name="false" path="Okay" />
			</pipe>

			<pipe name="switchResultNotFound" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="count(results/result[normalize-space(.)='[notFound]'])=0">
				<forward name="true" path="LdapError" />
				<forward name="false" path="NotAuthorizedError" />
			</pipe>

			<FixedResultPipe name="LdapError" returnString="&lt;error&gt;LDAP_ERROR&lt;/error&gt;">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>

			<FixedResultPipe name="NotAuthorizedError" returnString="&lt;error&gt;NOT_AUTHORIZED&lt;/error&gt;">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>

			<pipe name="Okay" className="nl.nn.adapterframework.pipes.GetFromSession" sessionKey="originalMessage">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
	<adapter name="DeleteFromExceptionLog_Check_Role">
		<receiver name="DeleteFromExceptionLog_Check_Role">
			<listener className="nl.nn.adapterframework.receivers.JavaListener" name="DeleteFromExceptionLog_Check_Role" />
		</receiver>
		<pipeline firstPipe="switchRole">
			<exits>
				<exit state="success" name="EXIT" />
			</exits>
			<!-- 		<cache keyInputSessionKey="principal"/> -->
			<!-- INPUT (sessionKeys): principal -->

			<pipe name="switchRole" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="string-length(row/field)=0">
				<forward name="true" path="found" />
				<forward name="false" path="getDnFind" />
			</pipe>

			<pipe name="getDnFind" className="nl.nn.adapterframework.pipes.XsltPipe" xpathExpression="replace('${delete.ldap.dn.user}','%principal%',$principal)" xsltVersion="2" getInputFromFixedValue="&lt;dummy/&gt;" storeResultInSessionKey="dnFind">
				<param name="principal" sessionKey="principal" />
				<forward name="success" path="ldapFindMemberPipe" />
			</pipe>

			<pipe name="ldapFindMemberPipe" className="nl.nn.adapterframework.ldap.LdapFindMemberPipe" host="insim.biz" port="636" useSsl="true" authAlias="${esb.ff.alias}">
				<param name="dnSearchIn" sessionKey="originalMessage" xpathExpression="row/field" />
				<param name="dnFind" sessionKey="dnFind" />
				<forward name="success" path="found" />
				<forward name="notFound" path="notFaund" />
				<forward name="ldapException" path="ldapExseption" />
			</pipe>

			<FixedResultPipe name="found" returnString="[found]">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>

			<FixedResultPipe name="notFaund" returnString="[notFound]">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>

			<FixedResultPipe name="ldapExseption" returnString="[ldapException]">
				<forward name="success" path="EXIT" />
			</FixedResultPipe>
		</pipeline>
	</adapter>
</module>
